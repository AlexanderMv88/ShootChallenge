package org.shootChallenge.ui;

import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.*;
import com.vaadin.ui.components.grid.HeaderCell;
import com.vaadin.ui.components.grid.HeaderRow;
import org.shootChallenge.entity.Shoot;
import org.shootChallenge.repository.ShootRepository;
import org.shooterCRUD.entity.Shooter;
import org.shooterCRUD.helper.CustomFilter;
import org.shooterCRUD.repository.ShooterRepository;
import org.shooterCRUD.ui.CommonUI;
import org.vaadin.crudui.crud.CrudListener;
import org.vaadin.crudui.crud.CrudOperation;
import org.vaadin.crudui.crud.impl.GridCrud;
import org.vaadin.crudui.form.AbstractAutoGeneratedCrudFormFactory;
import org.vaadin.crudui.form.impl.form.factory.GridLayoutCrudFormFactory;
import org.vaadin.crudui.form.impl.form.factory.VerticalCrudFormFactory;
import org.vaadin.crudui.layout.impl.HorizontalSplitCrudLayout;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;

import static com.vaadin.ui.UI.getCurrent;

public class ShootCrudForm extends Panel implements View {

    private VerticalLayout hLayout;

    public ShootCrudForm() {
    }

    protected void init(VaadinRequest request) {
    }

    private void renameCrudWindowButtons(AbstractAutoGeneratedCrudFormFactory crudFormFactory) {
        crudFormFactory.setButtonCaption(CrudOperation.ADD, "Создать");
        crudFormFactory.setButtonCaption(CrudOperation.UPDATE, "Изменить");
        crudFormFactory.setButtonCaption(CrudOperation.DELETE, "Удалить");
        crudFormFactory.setCancelButtonCaption("Отмена");
        crudFormFactory.setButtonCaption(CrudOperation.READ, "Сброс");
    }

    private GridCrud<Shoot> createCompCrudUI() throws UnsupportedOperationException {
        VerticalCrudFormFactory<Shoot> objFormFactory = new VerticalCrudFormFactory<>(Shoot.class);

        GridCrud<Shoot> objCrudUI = new GridCrud<>(Shoot.class, new HorizontalSplitCrudLayout(), objFormFactory);

        renameCrudWindowButtons(objFormFactory);

        Map<String, String> columnsWithCaptions = new LinkedHashMap<String, String>() {
            {
                this.put("shooter", "Полное имя");
                this.put("res", "Результат");
            }
        };

        setCaptionsToGridAndWindow(objFormFactory, objCrudUI, columnsWithCaptions);

        createShooterCBox(objFormFactory);

        objCrudUI.getGrid().getColumn("id").setHidden(true);
        createCustomFilter(objCrudUI.getGrid());
        objCrudUI.setCrudFormFactory(objFormFactory);

        objCrudUI.setCrudListener(new CrudListener<Shoot>() {
            @Override
            public Collection<Shoot> findAll() {
                return ((ShootRepository) ((CommonUI) getCurrent()).repositories.get("shootRepository")).findAll();
            }

            @Override
            public Shoot add(Shoot shoot) {
                return ((ShootRepository) ((CommonUI) getCurrent()).repositories.get("shootRepository")).save(shoot);
            }

            @Override
            public Shoot update(Shoot shoot) {
                return ((ShootRepository) ((CommonUI) getCurrent()).repositories.get("shootRepository")).save(shoot);
            }

            @Override
            public void delete(Shoot shoot) {
                ((ShootRepository) ((CommonUI) getCurrent()).repositories.get("shootRepository")).delete(shoot);
            }
        });
        return objCrudUI;
    }

    private void setCaptionsToGridAndWindow(AbstractAutoGeneratedCrudFormFactory crudFormFactory, GridCrud crudUI, Map<String, String> columnsWithCaptions) {
        String[] columns = columnsWithCaptions.keySet().toArray(new String[columnsWithCaptions.keySet().size()]);
        crudFormFactory.setVisibleProperties(columns);
        String[] captions = columnsWithCaptions.values().toArray(new String[columnsWithCaptions.values().size()]);
        crudFormFactory.setFieldCaptions(captions);

        for (Map.Entry<String, String> entry : columnsWithCaptions.entrySet()) {
            String column = entry.getKey();
            String caption = entry.getValue();
            crudUI.getGrid().getColumn(column).setCaption(caption);
        }
    }

    private void createCustomFilter(Grid<Shoot> objGrid) {
        final HeaderRow filterRow = objGrid.appendHeaderRow();
        for (final Grid.Column<Shoot, ?> column : objGrid.getColumns()) {
            final HeaderCell headerCell = filterRow.getCell(column);
            if (column.getCaption().toLowerCase().contains("дата")) {
                headerCell.setComponent(new CustomFilter<Shoot>().createFilterDateField(column, objGrid));
            } else {
                headerCell.setComponent(new CustomFilter<Shoot>().createFilterTextField(column, objGrid));
            }
        }

    }

    public void enter(ViewChangeListener.ViewChangeEvent event) {
        GridCrud<Shoot> compCrudUI = createCompCrudUI();

        Button button = new Button("Справочник стрелков", e-> ((MainNavigatorUI) getUI()).getNavigator().navigateTo(((MainNavigatorUI) getUI()).SHOOTER_CRUD_FORM));

        hLayout = new VerticalLayout(compCrudUI, button);

        compCrudUI.setSizeFull();
        hLayout.setSizeFull();
        this.setSizeFull();

        hLayout.setExpandRatio(compCrudUI,1f);

        this.setContent(hLayout);
    }

    private void createShooterCBox(VerticalCrudFormFactory<Shoot> objFormFactory) {
        objFormFactory.setFieldProvider("shooter", () -> {
            ComboBox<Shooter> cBox = new ComboBox<>("Shooter", ((ShooterRepository) ((CommonUI) getCurrent()).repositories.get("shooterRepository")).findAll());
            cBox.setItemCaptionGenerator(Shooter::getFullName);
            return cBox;
        });
    }

}